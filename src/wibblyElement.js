// Generated by CoffeeScript 1.9.3
(function() {
  this.WibblyElement = (function() {
    function WibblyElement(element1) {
      this.element = element1;
      this.element.style.position = 'relative';
      this.top = this.loadBezier(this.element, 'data-top');
      this.bottom = this.loadBezier(this.element, 'data-bottom');
      this.loadBackground(this.element);
      this.createCanvas();
      this.hookEvents();
      this.adjustCanvas();
    }

    WibblyElement.prototype.loadBezier = function(element, attrib) {
      var attr, test;
      test = element.attributes.getNamedItem(attrib);
      if (test === null) {
        return null;
      }
      attr = test.value.split(' ').map(parseFloat);
      if (attr.length < 8) {
        throw "bezier requires 8 points";
      }
      return new ScalableBezier(attr[0], attr[1], attr[2], attr[3], attr[4], attr[5], attr[6], attr[7]);
    };

    WibblyElement.prototype.loadBackground = function(element) {
      var attribute;
      attribute = element.attributes.getNamedItem('data-background');
      if (attribute === null) {
        throw "No data-background attribute - attribute is required";
      }
      this.background = BackgroundStrategy.Factory(attribute.value);
      return this.background.setCallback((function(_this) {
        return function() {
          return _this.adjustCanvas();
        };
      })(this));
    };

    WibblyElement.prototype.createCanvas = function() {
      this.canvas = document.createElement('canvas');
      this.canvas.style.position = "absolute";
      this.canvas.style.left = 0;
      this.canvas.style.top = 0;
      this.canvas.style.zIndex = -1;
      this.context = this.canvas.getContext('2d');
      return this.element.appendChild(this.canvas);
    };

    WibblyElement.prototype.getElementDimensions = function(element) {
      var style;
      style = element.currentStyle || window.getComputedStyle(element);
      return {
        width: element.offsetWidth,
        height: element.offsetHeight,
        topMargin: parseFloat(style.marginTop),
        bottomMargin: parseFloat(style.marginBottom)
      };
    };

    WibblyElement.prototype.hookEvents = function() {
      return window.addEventListener('resize', (function(_this) {
        return function() {
          return _this.adjustCanvas();
        };
      })(this));
    };

    WibblyElement.prototype.adjustCanvas = function() {
      var dims, height, width;
      dims = this.getElementDimensions(this.element);
      this.canvas.style.top = dims.topMargin + "px";
      height = Math.abs(dims.topMargin) + Math.abs(dims.bottomMargin) + dims.height;
      this.canvas.height = height;
      this.canvas.style.height = height + "px";
      width = dims.width;
      this.canvas.width = width;
      this.canvas.style.width = width + "px";
      return this.draw(dims);
    };

    WibblyElement.prototype.draw = function(dims) {
      var bottomBezier, topBezier;
      this.context.clearRect(0, 0, parseFloat(this.canvas.style.width), parseFloat(this.canvas.style.height));
      this.context.beginPath();
      if (this.top !== null) {
        topBezier = this.top.scale(dims.width, Math.abs(dims.topMargin));
        this.context.moveTo(topBezier.startX, topBezier.startY);
        topBezier.applyToCanvas(this.context);
      } else {
        this.context.moveTo(0, 0);
        this.context.lineTo(dims.width, 0);
      }
      if (this.bottom !== null) {
        bottomBezier = this.bottom.scale(dims.width, Math.abs(dims.bottomMargin)).reverse();
        bottomBezier.applyToCanvas(this.context, 0, dims.height + Math.abs(dims.topMargin));
      } else {
        this.context.lineTo(dims.width, dims.height + Math.abs(dims.topMargin) + Math.abs(dims.bottomMargin));
        this.context.lineTo(0, dims.height + Math.abs(dims.topMargin) + Math.abs(dims.bottomMargin));
      }
      this.context.closePath();
      this.context.clip();
      if (this.background.ready) {
        return this.background.renderToCanvas(this.canvas, this.context);
      }
    };

    return WibblyElement;

  })();

}).call(this);
